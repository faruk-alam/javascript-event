Events


You can write JavaScript code that executes when an event occurs, such as when a user clicks an HTML element, 
moves the mouse, or submits a form.
When an event occurs on a target element, a handler function is executed.
Common HTML events include:contentImage
Corresponding events can be added to HTML elements as attributes.
For example: <p onclick="someFunc()">some text</p>


The onload and onunload events are triggered when the user enters or leaves the page. These can be useful when 
performing actions after the page is loaded.
<body onload="doSomething()">
HTML
Similarly, the window.onload event can be used to run code after the whole page is loaded.
window.onload ​= function() {

  ​//some code

JS
The onchange event is mostly used on textboxes. The event handler gets called when the text inside the textbox 
changes and focus is lost from the element.
For example:
Event Propagation


There are two ways of event propagation in the HTML DOM: bubbling and capturing.

Event propagation allows for the definition of the element order when an event occurs. If you have a <p> 
element inside a <div> element, and the user clicks on the <p> element, which element's "click" event should 
be handled first?

In bubbling, the innermost element's event is handled first and then the outer element's event is handled. 
The <p> element's click event is handled first, followed by the <div> element's click event.

In capturing, the outermost element's event is handled first and then the inner. The <div> element's click 
event is handled first, followed by the <p> element's click event.
Capturing goes down the DOM.
Bubbling goes up the 

